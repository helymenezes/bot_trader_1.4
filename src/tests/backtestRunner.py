import numpy as np
import pandas as pd


def backtestRunner(
    stock_data: pd.DataFrame, strategy_function, strategy_instance=None, periods=900, initial_balance=1000, **strategy_kwargs
):
    """
    Executa um backtest de qualquer estrat√©gia que segue a l√≥gica de:
    - True = comprado
    - False = vendido

    O bot verifica se j√° est√° comprado/vendido e s√≥ age no primeiro sinal.

    :param stock_data: DataFrame contendo os dados do ativo.
    :param strategy_function: Fun√ß√£o da estrat√©gia de trading (ex: utBotAlerts, getMovingAverageTradeStrategy).
    :param strategy_instance: Inst√¢ncia da classe (ex: devTrader) para estrat√©gias que exigem 'self'.
    :param periods: N√∫mero de per√≠odos a serem analisados no backtest.
    :param initial_balance: Saldo inicial da conta de trading.
    :param strategy_kwargs: Par√¢metros adicionais para a estrat√©gia.
    :return: Exibe estat√≠sticas do backtest.
    """
    # üîπ Ajuste para garantir que h√° dados suficientes para calcular m√©dias m√≥veis corretamente
    min_required_periods = strategy_kwargs.get("slow_window", 40) + 20  # Adicionamos um buffer extra
    stock_data = stock_data[-max(periods, min_required_periods) :].copy().reset_index(drop=True)

    # üîπ REMOVE LINHAS INICIAIS COM NaN PARA EVITAR PROBLEMAS
    stock_data.dropna(inplace=True)

    # Inicializa vari√°veis do backtest
    balance = initial_balance  # Saldo inicial
    position = 0  # 1 = comprado, -1 = vendido, 0 = sem posi√ß√£o
    entry_price = 0  # Pre√ßo de entrada na opera√ß√£o
    last_signal = None  # Guarda o √∫ltimo tipo de sinal para evitar compras/vendas consecutivas
    trades = 0  # Contador de opera√ß√µes

    print(f"üìä Iniciando backtest da estrat√©gia: {strategy_function.__name__}")
    print(f"üîπ Balan√ßo inicial: ${balance:.2f}")

    # Loop sobre cada per√≠odo no dataset
    for i in range(1, len(stock_data)):
        current_data = stock_data.iloc[: i + 1]

        # Se a fun√ß√£o precisa de um objeto (ex: `self`), passamos a inst√¢ncia do bot
        if strategy_instance:
            signal = strategy_function(strategy_instance)
        else:
            signal = strategy_function(current_data, **strategy_kwargs)

        # Se o sinal for `None`, pulamos para evitar erros
        if signal is None:
            continue

        close_price = stock_data.iloc[i]["close_price"]

        # Compra apenas no primeiro sinal de compra e se n√£o estiver comprado
        if signal and position == 0 and last_signal != "buy":
            position = 1
            entry_price = close_price
            last_signal = "buy"
            trades += 1

        # Venda apenas no primeiro sinal de venda e se estiver comprado
        elif not signal and position == 1 and last_signal != "sell":
            position = 0
            profit = ((close_price - entry_price) / entry_price) * balance
            balance += profit
            last_signal = "sell"
            trades += 1

    # Fechar posi√ß√£o final
    if position == 1:
        final_price = stock_data.iloc[-1]["close_price"]
        profit = ((final_price - entry_price) / entry_price) * balance
        balance += profit

    # üîπ Agora calculamos `profit_percentage` antes do `print()`
    profit_percentage = ((balance - initial_balance) / initial_balance) * 100

    # Resultados
    print(f"üîπ Balan√ßo final: ${balance:.2f}")
    print(f"üìà Lucro/preju√≠zo percentual: {profit_percentage:.2f}%")
    print(f"üìä Total de opera√ß√µes realizadas: {trades}")

    return profit_percentage
